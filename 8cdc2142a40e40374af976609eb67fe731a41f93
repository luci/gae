{
  "comments": [
    {
      "key": {
        "uuid": "1f11d3d1_0ee42d4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-07-25T23:25:27Z",
      "side": 1,
      "message": "What do you think about this?\n\nI want new tq library to have the same interface (at least when using datastore): \n\n  err :\u003d datastore.RunInTransaction(ctx, func(ctx context.Context) error {\n    tq.AddTask(ctx, task)\n    ...\n  }, nil)\n\nBut ttq\u0027s PostProcess callbacks make it hard to keep such simple interface. \n\nThe downside is slightly higher CPU cost of all transactions, even if they don\u0027t use txndefer.Defer(...) :( I can micro-optimize it a bit if necessary by delaying some initialization until first txndefer.Defer call, but it would make code more convoluted.",
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e86c0126_3d75e6ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-07-27T05:17:45Z",
      "side": 1,
      "message": "I like this, and since it\u0027s a separate package, I don\u0027t think it is a likely to be misused as Spanner\u0027s Defer (see my comment https://crrev.com/c/2319162/2/server/span/client.go@111)",
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f06969b_27fc5483",
        "filename": "filter/txndefer/filter.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-07-27T05:17:45Z",
      "side": 1,
      "message": "this is indeed an unfortunate cost.\nIs this needed because incorrect but possible use of goroutines launched within transaction function f which outlive f? If so, do we care?",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 11
      },
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d4742b4_d9bc69ef",
        "filename": "filter/txndefer/filter.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-07-27T22:15:05Z",
      "side": 1,
      "message": "I removed reset().\n\nThe lock is still needed since it\u0027s not uncommon to launch multiple goroutines within a transaction.",
      "parentUuid": "2f06969b_27fc5483",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 11
      },
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e45e4e7d_cb73f224",
        "filename": "filter/txndefer/filter.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-07-27T23:25:38Z",
      "side": 1,
      "message": "\u003e The lock is still needed since it\u0027s not uncommon to launch multiple goroutines within a transaction.\n\nTrue, but it is uncommon to NOT wait for them to complete, which would provide synchronization.\nHence, I think, the lock isn\u0027t necessary in execCBs(), which would reduce filter to just creating 1 new context.",
      "parentUuid": "2d4742b4_d9bc69ef",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 11
      },
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b6a1b23_7ec5f508",
        "filename": "filter/txndefer/filter_test.go",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-07-27T05:17:45Z",
      "side": 1,
      "message": "üëç ensures it\u0027s not just some random context.Background(), right?",
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fce0eaf_4660ebe1",
        "filename": "filter/txndefer/filter_test.go",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-07-27T22:15:05Z",
      "side": 1,
      "message": "Yes. Datastore filters have complicated relationship with contexts (e.g. see two contexts in FilterRDS). It\u0027s a test that the filter really uses the one passed to RunInTransaction.",
      "parentUuid": "6b6a1b23_7ec5f508",
      "revId": "8cdc2142a40e40374af976609eb67fe731a41f93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}